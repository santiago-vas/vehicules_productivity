def list_diff(list1, list2):
    out = [item for item in list1 if not item in list2]
    return out

def getLastData(imeisToAnalyze,project,clientId,nameDate,tableName):
    # Last date
    try:  
        deviceList = pd.read_sql("""select imei, max(max_date) as begin_time from p.lookml
                where type='daily' and flat=1 and process_name='{}' and client_id={} and dashboard_type='{}'
                group by imei """.format(processName, clientId, dashboardType), psqlCon)
        
        if len(deviceList)==0: 
            queryLastDate = clientBigQueryLookerAnalytics.query("""SELECT imei, max({}) as begin_time
                                                          FROM `{}.{}`
                                                         GROUP BY imei""".format(project,clientId,tableName))
            resultLastDate = queryLastDate.result()
            deviceList = resultLastDate.to_dataframe()
            
        else: pass
        deviceList['begin_time'] = pd.to_datetime(deviceList.begin_time).dt.tz_localize(None)
        
    except: 
        deviceList = pd.DataFrame(columns={'imei', 'begin_time'})            

    totalImeiList = imeisToAnalyze.imei.unique().tolist()
    currentDeviceList = deviceList.imei.unique().tolist()
    imeiDiff = list_diff(totalImeiList, currentDeviceList)
    
    dateToProcess = datetime.utcnow() + timedelta(days = -5)  
    startDate = datetime.combine(dateToProcess, time.min)
    endDate = datetime.combine(datetime.utcnow(), time.min) 
    deviceList['end_time'] = endDate
    for imei in imeiDiff:
        plate = pd.DataFrame({
        'imei': imei,
        'begin_time': startDate,
        'end_time': endDate,
        }, index = { 'indice': 0 })
        deviceList = deviceList.append(plate)
 
    deviceList['end_time'] = deviceList['end_time'].apply(lambda x: x.replace(microsecond = 0))
    deviceList.reset_index(drop=True, inplace=True)
    return (deviceList)

def saveData(finalDataFrame,clientId,env,whatToDo,tableName,credenciales):
    if len(finalDataFrame.index) > 0:
        finalDataFrame.to_gbq(destination_table = "{}.{}".format(clientId,tableName), 
                project_id = env, credentials = credenciales, if_exists = whatToDo)
    else:
        print("No hay data, no se guarda nada")      
